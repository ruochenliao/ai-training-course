version: '3.8'

services:
  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-backend-dev
    restart: unless-stopped
    environment:
      - ENV=development
      - DEBUG=true
      - DATABASE_URL=postgresql://rag_user:rag_password@postgres:5432/rag_db
      - REDIS_URL=redis://redis:6379/0
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - QWEN_API_KEY=${QWEN_API_KEY:-your_qwen_api_key}
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - milvus-standalone
      - neo4j
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - rag-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # 管理后台前端
  admin-frontend:
    build:
      context: ./frontend/admin-app
      dockerfile: Dockerfile.dev
    container_name: rag-admin-frontend-dev
    restart: unless-stopped
    environment:
      - NUXT_PUBLIC_API_BASE=http://localhost:8000/api/v1
      - NUXT_PUBLIC_WS_BASE=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/admin-app:/app
      - /app/node_modules
    networks:
      - rag-network
    command: npm run dev

  # 用户前端
  user-frontend:
    build:
      context: ./frontend/user-app
      dockerfile: Dockerfile.dev
    container_name: rag-user-frontend-dev
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
    ports:
      - "3001:3000"
    volumes:
      - ./frontend/user-app:/app
      - /app/node_modules
    networks:
      - rag-network
    command: npm run dev

  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: rag-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=rag_db
      - POSTGRES_USER=rag_user
      - POSTGRES_PASSWORD=rag_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: rag-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag-network

  # Milvus向量数据库
  etcd:
    container_name: milvus-etcd-dev
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - rag-network

  minio:
    container_name: milvus-minio-dev
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag-network

  milvus-standalone:
    container_name: milvus-standalone-dev
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - rag-network

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.13
    container_name: rag-neo4j-dev
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/neo4j_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - rag-network

volumes:
  postgres_data:
  redis_data:
  milvus_data:
  etcd_data:
  minio_data:
  neo4j_data:
  neo4j_logs:

networks:
  rag-network:
    driver: bridge
