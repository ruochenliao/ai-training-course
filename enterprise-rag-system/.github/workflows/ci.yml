name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: enterprise-rag-system

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install black isort flake8 mypy
    
    - name: Code formatting check (Black)
      run: |
        cd backend
        black --check --diff .
    
    - name: Import sorting check (isort)
      run: |
        cd backend
        isort --check-only --diff .
    
    - name: Linting (Flake8)
      run: |
        cd backend
        flake8 .
    
    - name: Type checking (MyPy)
      run: |
        cd backend
        mypy app/
      continue-on-error: true

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_enterprise_rag
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Wait for services
      run: |
        sleep 10
    
    - name: Run tests
      env:
        DATABASE_URL: mysql://root:testpassword@localhost:3306/test_enterprise_rag
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        app: [user-app, admin-app]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/${{ matrix.app }}
        npm ci
    
    - name: Run linting
      run: |
        cd frontend/${{ matrix.app }}
        npm run lint
    
    - name: Run type checking
      run: |
        cd frontend/${{ matrix.app }}
        npm run type-check
    
    - name: Run tests
      run: |
        cd frontend/${{ matrix.app }}
        npm run test
      continue-on-error: true
    
    - name: Build application
      run: |
        cd frontend/${{ matrix.app }}
        npm run build

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker镜像构建
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production
    
    - name: Build and push user frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/user-app
        file: ./frontend/user-app/Dockerfile
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/user-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push admin frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/admin-app
        file: ./frontend/admin-app/Dockerfile
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/admin-frontend:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加部署到测试环境的脚本
        # 例如：kubectl apply -f k8s/staging/
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # 这里添加集成测试脚本

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加部署到生产环境的脚本
        # 例如：kubectl apply -f k8s/production/
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # 这里添加健康检查脚本
    
    - name: Notify deployment
      run: |
        echo "Notifying deployment completion..."
        # 这里添加部署通知脚本

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # 这里添加性能测试脚本
        # 例如：使用 k6 或 Artillery 进行负载测试
    
    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # 生成性能测试报告
