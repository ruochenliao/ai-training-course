version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ai-platform-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: ai_platform
      MYSQL_USER: ai_user
      MYSQL_PASSWORD: ai_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - ai-platform-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai-platform-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123456
    networks:
      - ai-platform-network

  # Milvus向量数据库
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-platform-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-platform-network

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - ai-platform-network

  # 对象存储 (独立的Minio实例用于文件存储)
  file-storage:
    image: minio/minio:latest
    container_name: ai-platform-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123456
    ports:
      - "9002:9000"
      - "9003:9001"
    volumes:
      - minio_files:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai-platform-network

  # FastAPI后端服务 (开发环境)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-platform-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://ai_user:ai_password@mysql:3306/ai_platform
      - REDIS_URL=redis://:redis123456@redis:6379/0
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - MINIO_ENDPOINT=file-storage:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123456
      - SECRET_KEY=your-secret-key-here
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - mysql
      - redis
      - milvus
      - file-storage
    networks:
      - ai-platform-network
    profiles:
      - backend

  # Vue.js前端服务 (开发环境)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ai-platform-frontend
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_WS_BASE_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ai-platform-network
    profiles:
      - frontend

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: ai-platform-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - ai-platform-network
    profiles:
      - production

  # Celery Worker (异步任务处理)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-platform-celery-worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://ai_user:ai_password@mysql:3306/ai_platform
      - REDIS_URL=redis://:redis123456@redis:6379/0
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - MINIO_ENDPOINT=file-storage:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=admin123456
    command: celery -A app.tasks.celery worker --loglevel=info
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    depends_on:
      - mysql
      - redis
      - milvus
      - file-storage
    networks:
      - ai-platform-network
    profiles:
      - backend

  # Celery Beat (定时任务调度)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-platform-celery-beat
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://ai_user:ai_password@mysql:3306/ai_platform
      - REDIS_URL=redis://:redis123456@redis:6379/0
    command: celery -A app.tasks.celery beat --loglevel=info
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - ai-platform-network
    profiles:
      - backend

  # Flower (Celery监控)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai-platform-flower
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://:redis123456@redis:6379/0
    command: celery -A app.tasks.celery flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - ai-platform-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local
  minio_files:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  ai-platform-network:
    driver: bridge
