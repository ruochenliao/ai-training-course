# 智能客服系统升级版 - Docker Compose配置
# 包含所有必要的服务：MySQL、Milvus、Neo4j、Redis等

version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ics_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: intelligent_customer_service
      MYSQL_USER: ics_user
      MYSQL_PASSWORD: ics_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - ics_network

  # Redis缓存
  redis:
    image: redis:7.0-alpine
    container_name: ics_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password
    networks:
      - ics_network

  # Milvus向量数据库 - Etcd
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ics_network

  # Milvus向量数据库 - MinIO
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ics_network

  # Milvus向量数据库 - Standalone
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.0
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - ics_network

  # Neo4j图数据库
  neo4j:
    image: neo4j:5.0
    container_name: ics_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - ics_network

  # 智能客服后端服务
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: ics_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql://ics_user:ics_password@mysql:3306/intelligent_customer_service
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j_password
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - QWEN_API_KEY=${QWEN_API_KEY}
      - MODELSCOPE_CACHE_DIR=/app/models
    ports:
      - "9999:9999"
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - mysql
      - redis
      - milvus
      - neo4j
    networks:
      - ics_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue3管理后台
  admin-frontend:
    build:
      context: ./web
      dockerfile: ../docker/frontend-admin.Dockerfile
    container_name: ics_admin_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:9999/api/v1
    depends_on:
      - backend
    networks:
      - ics_network

  # React聊天界面
  chat-frontend:
    build:
      context: ./web-react
      dockerfile: ../docker/frontend-chat.Dockerfile
    container_name: ics_chat_frontend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:9999/api/v1
    depends_on:
      - backend
    networks:
      - ics_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ics_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - admin-frontend
      - chat-frontend
    networks:
      - ics_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: ics_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ics_network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: ics_grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ics_network

  # Elasticsearch日志存储
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ics_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ics_network

  # Kibana日志可视化
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ics_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ics_network

  # Logstash日志处理
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ics_logstash
    restart: unless-stopped
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - ics_network

# 网络配置
networks:
  ics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
